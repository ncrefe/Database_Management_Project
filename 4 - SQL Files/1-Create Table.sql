DROP TABLE BILL;
DROP TABLE FOOD_INGREDIENT;
DROP TABLE ORDER_PRODUCT;
DROP TABLE PRODUCT;
DROP TABLE ORDER_;
DROP TABLE RESERVATION;
DROP TABLE TABLE_;
DROP TABLE WAITER; 
DROP TABLE INGREDIENT;
DROP TABLE SUPPLIER;

DROP SEQUENCE bill_id_seq;


CREATE TABLE TABLE_ (
  TABLE_ID INTEGER PRIMARY KEY NOT NULL,
  TABLE_SIZE INTEGER,
  TABLE_LOCATION VARCHAR2(20) NOT NULL,
  TABLE_FLOOR INTEGER NOT NULL,
  WAITER_ID INTEGER
);

CREATE TABLE RESERVATION (
  RESERVATION_ID INTEGER PRIMARY KEY NOT NULL,
  RESERVATION_CUSTOMER_NAME VARCHAR2(255) NOT NULL,
  RESERVATION_TIME DATE NOT NULL,
  TABLE_ID INTEGER NOT NULL, 
  RESERVATION_PHONE_NUMBER VARCHAR2(255) NOT NULL
);

CREATE TABLE WAITER (
  WAITER_ID INTEGER PRIMARY KEY NOT NULL,
  WAITER_NAME VARCHAR2(255) NOT NULL,
  WAITER_PHONE_NUMBER VARCHAR2(255) NOT NULL,
  WAITER_DATE_OF_BIRTH DATE NOT NULL 
);

CREATE TABLE ORDER_(
  ORDER_ID INTEGER PRIMARY KEY NOT NULL,
  TABLE_ID INTEGER NOT NULL,
  ORDER_DATE DATE NOT NULL
);



CREATE TABLE PRODUCT ( -- WORKS
  PRODUCT_ID INTEGER  GENERATED BY DEFAULT ON NULL AS IDENTITY,
  PRODUCT_COST DECIMAL(6, 2) NOT NULL,
  PRODUCT_PRICE DECIMAL(6, 2) NOT NULL,
  PRODUCT_DESCRIPTION VARCHAR2(255) NOT NULL,
  PRODUCT_TYPE VARCHAR2(15) NOT NULL ,
   CONSTRAINT PRODUCT_PK PRIMARY KEY (PRODUCT_ID)
);


CREATE TABLE BILL (
  BILL_ID INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
  BILL_DATE DATE NOT NULL,
  BILL_STATUS VARCHAR2(20) NOT NULL, 
  BILL_PAYMENT_METHOD VARCHAR2(20) NOT NULL, 
  ORDER_PRODUCT_ID INTEGER NOT NULL,
     CONSTRAINT BILL_PK PRIMARY KEY (BILL_ID)
);

CREATE TABLE ORDER_PRODUCT (
  ORDER_PRODUCT_ID INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
  ORDER_ID INTEGER NOT NULL,
  PRODUCT_ID INTEGER NOT NULL,
  ORDER_PRODUCT_STATUS VARCHAR2(255) NOT NULL,
  CONSTRAINT ORDER_PRODUCT_PK PRIMARY KEY (ORDER_PRODUCT_ID)

);
CREATE TABLE SUPPLIER (
  SUPPLIER_ID INTEGER  GENERATED BY DEFAULT ON NULL AS IDENTITY,
  SUPPLIER_NAME VARCHAR2(255) NOT NULL,
  SUPPLIER_TELEPHONE_NUMBER VARCHAR2(255) NOT NULL,
  CONSTRAINT SUPPLIER_PK PRIMARY KEY (SUPPLIER_ID)
);

CREATE TABLE INGREDIENT (
INGREDIENT_ID INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
INGREDIENT_NAME VARCHAR2(255) NOT NULL,
SUPPLIER_ID INTEGER NOT NULL,
CONSTRAINT INGREDIENT_PK PRIMARY KEY (INGREDIENT_ID),
CONSTRAINT INGREDIENT_SUPPLIER_FK FOREIGN KEY (SUPPLIER_ID) REFERENCES SUPPLIER(SUPPLIER_ID)
);

CREATE TABLE FOOD_INGREDIENT (
  FOOD_INGREDIENT_ID INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
  FOOD_ID INTEGER NOT NULL,
  INGREDIENT_ID INTEGER NOT NULL,
  CONSTRAINT FOOD_INGREDIENT_ID_PK PRIMARY KEY (FOOD_INGREDIENT_ID)
);



ALTER TABLE TABLE_ ADD CONSTRAINT WAITER_FK FOREIGN KEY (WAITER_ID) REFERENCES WAITER(WAITER_ID);
ALTER TABLE RESERVATION ADD CONSTRAINT TABLE_FK FOREIGN KEY (TABLE_ID) REFERENCES TABLE_(TABLE_ID);
ALTER TABLE ORDER_ ADD CONSTRAINT TABLE_ID_FK FOREIGN KEY (TABLE_ID) REFERENCES TABLE_(TABLE_ID);
ALTER TABLE BILL ADD CONSTRAINT ORDER_PRODUCT_ID_FK FOREIGN KEY (ORDER_PRODUCT_ID) REFERENCES ORDER_PRODUCT(ORDER_PRODUCT_ID);
ALTER TABLE ORDER_PRODUCT ADD CONSTRAINT ORDER_ID_FK FOREIGN KEY (ORDER_ID) REFERENCES ORDER_(ORDER_ID);
ALTER TABLE ORDER_PRODUCT ADD CONSTRAINT PRODUCT_ID_FK FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID);
ALTER TABLE TABLE_ ADD CONSTRAINT TABLE_LOCATION_CHECK CHECK (TABLE_LOCATION IN ('garden', 'terrace', 'inside'));
ALTER TABLE BILL ADD CONSTRAINT BILL_STATUS_CHECK CHECK (BILL_STATUS IN ('paid', 'unpaid'));
ALTER TABLE BILL ADD CONSTRAINT BILL_PAYMENT_METHOD_CHECK CHECK (BILL_PAYMENT_METHOD IN ('cash', 'credit card'));
ALTER TABLE ORDER_PRODUCT ADD CONSTRAINT ORDER_PRODUCT_STATUS_CHECK CHECK (ORDER_PRODUCT_STATUS IN ('prepared', 'unprepared'));
ALTER TABLE PRODUCT ADD CONSTRAINT PRODUCT_PRICE_CHECK CHECK (PRODUCT_PRICE >= 0);
ALTER TABLE PRODUCT ADD CONSTRAINT PRODUCT_COST_CHECK CHECK (PRODUCT_COST >= 0);
ALTER TABLE PRODUCT ADD CONSTRAINT PRODUCT_TYPE_CHECK CHECK (PRODUCT_TYPE IN ('beverage', 'food'));
ALTER TABLE TABLE_ ADD CONSTRAINT TABLE_SIZE_CHECK CHECK (TABLE_SIZE >= 1);
ALTER TABLE TABLE_ ADD CONSTRAINT FLOOR_CHECK CHECK (TABLE_FLOOR <= 5 AND TABLE_FLOOR >= 0);
ALTER TABLE WAITER ADD CONSTRAINT WAITER_PHONE_NUMBER_UNIQUE UNIQUE (WAITER_PHONE_NUMBER);
ALTER TABLE RESERVATION ADD CONSTRAINT RESERVATION_PHONE_NUMBER_UNIQUE UNIQUE (RESERVATION_PHONE_NUMBER);
ALTER TABLE FOOD_INGREDIENT ADD CONSTRAINT FOOD_ID_FK FOREIGN KEY (FOOD_ID) REFERENCES PRODUCT(PRODUCT_ID);
ALTER TABLE FOOD_INGREDIENT ADD CONSTRAINT INGREDIENT_ID_FK FOREIGN KEY (INGREDIENT_ID) REFERENCES INGREDIENT(INGREDIENT_ID);
ALTER TABLE SUPPLIER ADD CONSTRAINT SUPPLIER_TELEPHONE_NUMBER_UNIQUE UNIQUE (SUPPLIER_TELEPHONE_NUMBER);
ALTER TABLE INGREDIENT ADD CONSTRAINT INGREDIENT_UNIQUE_NAME UNIQUE (INGREDIENT_NAME);

CREATE OR REPLACE TRIGGER PREVENT_OVERLAPPING_RESERVATIONS
BEFORE INSERT ON RESERVATION
FOR EACH ROW
DECLARE
  overlap_found INTEGER;
BEGIN
  SELECT COUNT(*) INTO overlap_found
  FROM RESERVATION
  WHERE TABLE_ID = :NEW.TABLE_ID
    AND RESERVATION_TIME = :NEW.RESERVATION_TIME;

  IF overlap_found > 0 THEN
    RAISE_APPLICATION_ERROR(-20000, 'Table is already reserved at this time');
  END IF;
END;
/

CREATE OR REPLACE TRIGGER WAITER_AGE_CHECK
BEFORE INSERT ON WAITER
FOR EACH ROW
BEGIN
  IF (:new.waiter_date_of_birth > ADD_MONTHS(SYSDATE, -12*18)) THEN
    RAISE_APPLICATION_ERROR(-20001, 'Waiters must be at least 18 years old.');
  END IF;
END;
/


CREATE OR REPLACE TRIGGER PRODUCT_TYPE_CHECK
BEFORE INSERT ON PRODUCT
FOR EACH ROW
BEGIN
  IF (:new.product_type NOT IN ('beverage', 'food')) THEN
    RAISE_APPLICATION_ERROR(-20008, 'Product type must be "beverage" or "food".');
  END IF;
END;
/


CREATE SEQUENCE bill_id_seq;
CREATE OR REPLACE TRIGGER CREATE_BILL
AFTER INSERT ON ORDER_PRODUCT
FOR EACH ROW
BEGIN
  IF (:NEW.ORDER_PRODUCT_STATUS = 'prepared') THEN
    INSERT INTO BILL (
      BILL_ID,
      BILL_DATE,
      BILL_STATUS,
      BILL_PAYMENT_METHOD,
      ORDER_PRODUCT_ID
    )
    VALUES (
      BILL_ID_SEQ.NEXTVAL,
      CURRENT_TIMESTAMP,
      'unpaid',
      'cash',
      :NEW.ORDER_PRODUCT_ID
    );
  END IF;
END;
/

CREATE TRIGGER delete_reservations_trigger
AFTER DELETE ON TABLE_
FOR EACH ROW
BEGIN
  DELETE FROM RESERVATION
  WHERE TABLE_ID = :OLD.TABLE_ID;
END;
/


CREATE OR REPLACE TRIGGER check_food_type_in_food_ingredient
BEFORE INSERT OR UPDATE ON FOOD_INGREDIENT
FOR EACH ROW
DECLARE
  v_product_count INTEGER;
BEGIN
  SELECT COUNT(PRODUCT_ID) INTO v_product_count
  FROM PRODUCT
  WHERE PRODUCT_TYPE = 'food' AND PRODUCT_ID = :NEW.FOOD_ID;
  IF v_product_count = 0 THEN
    RAISE_APPLICATION_ERROR(-20000, 'The product with the food_id specified in the food_ingredient table must be of type "food".');
  END IF;
END;
/

CREATE OR REPLACE TRIGGER set_table_floor_to_zero
BEFORE INSERT OR UPDATE ON TABLE_
FOR EACH ROW
BEGIN
  IF :new.TABLE_LOCATION = 'garden' THEN
    :new.TABLE_FLOOR := 0;
  END IF;
END;